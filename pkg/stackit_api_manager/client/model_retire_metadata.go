/*
STACKIT API Management Service

STACKIT API Manager

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RetireMetadata struct for RetireMetadata
type RetireMetadata struct {
	Identifier *string `json:"identifier,omitempty"`
	ProjectId  *string `json:"projectId,omitempty"`
}

// NewRetireMetadata instantiates a new RetireMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetireMetadata() *RetireMetadata {
	this := RetireMetadata{}
	return &this
}

// NewRetireMetadataWithDefaults instantiates a new RetireMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetireMetadataWithDefaults() *RetireMetadata {
	this := RetireMetadata{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *RetireMetadata) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetireMetadata) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *RetireMetadata) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *RetireMetadata) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *RetireMetadata) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetireMetadata) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *RetireMetadata) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *RetireMetadata) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o RetireMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableRetireMetadata struct {
	value *RetireMetadata
	isSet bool
}

func (v NullableRetireMetadata) Get() *RetireMetadata {
	return v.value
}

func (v *NullableRetireMetadata) Set(val *RetireMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableRetireMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableRetireMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetireMetadata(val *RetireMetadata) *NullableRetireMetadata {
	return &NullableRetireMetadata{value: val, isSet: true}
}

func (v NullableRetireMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetireMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
