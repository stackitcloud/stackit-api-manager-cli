/*
api-manager-api

STACKIT API Manager API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PublishRequest struct for PublishRequest
type PublishRequest struct {
	Metadata *Metadata           `json:"metadata,omitempty"`
	Spec     *PublishRequestSpec `json:"spec,omitempty"`
}

// NewPublishRequest instantiates a new PublishRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishRequest() *PublishRequest {
	this := PublishRequest{}
	return &this
}

// NewPublishRequestWithDefaults instantiates a new PublishRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishRequestWithDefaults() *PublishRequest {
	this := PublishRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PublishRequest) GetMetadata() Metadata {
	if o == nil || o.Metadata == nil {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRequest) GetMetadataOk() (*Metadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PublishRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *PublishRequest) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *PublishRequest) GetSpec() PublishRequestSpec {
	if o == nil || o.Spec == nil {
		var ret PublishRequestSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRequest) GetSpecOk() (*PublishRequestSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *PublishRequest) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given PublishRequestSpec and assigns it to the Spec field.
func (o *PublishRequest) SetSpec(v PublishRequestSpec) {
	o.Spec = &v
}

func (o PublishRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullablePublishRequest struct {
	value *PublishRequest
	isSet bool
}

func (v NullablePublishRequest) Get() *PublishRequest {
	return v.value
}

func (v *NullablePublishRequest) Set(val *PublishRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishRequest(val *PublishRequest) *NullablePublishRequest {
	return &NullablePublishRequest{value: val, isSet: true}
}

func (v NullablePublishRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
