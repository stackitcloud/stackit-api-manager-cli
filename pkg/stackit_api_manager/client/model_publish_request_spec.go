/*
api-manager-api

STACKIT API Manager API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PublishRequestSpec struct for PublishRequestSpec
type PublishRequestSpec struct {
	OpenApi *PublishRequestOpenApi `json:"openApi,omitempty"`
}

// NewPublishRequestSpec instantiates a new PublishRequestSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishRequestSpec() *PublishRequestSpec {
	this := PublishRequestSpec{}
	return &this
}

// NewPublishRequestSpecWithDefaults instantiates a new PublishRequestSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishRequestSpecWithDefaults() *PublishRequestSpec {
	this := PublishRequestSpec{}
	return &this
}

// GetOpenApi returns the OpenApi field value if set, zero value otherwise.
func (o *PublishRequestSpec) GetOpenApi() PublishRequestOpenApi {
	if o == nil || o.OpenApi == nil {
		var ret PublishRequestOpenApi
		return ret
	}
	return *o.OpenApi
}

// GetOpenApiOk returns a tuple with the OpenApi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRequestSpec) GetOpenApiOk() (*PublishRequestOpenApi, bool) {
	if o == nil || o.OpenApi == nil {
		return nil, false
	}
	return o.OpenApi, true
}

// HasOpenApi returns a boolean if a field has been set.
func (o *PublishRequestSpec) HasOpenApi() bool {
	if o != nil && o.OpenApi != nil {
		return true
	}

	return false
}

// SetOpenApi gets a reference to the given PublishRequestOpenApi and assigns it to the OpenApi field.
func (o *PublishRequestSpec) SetOpenApi(v PublishRequestOpenApi) {
	o.OpenApi = &v
}

func (o PublishRequestSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OpenApi != nil {
		toSerialize["openApi"] = o.OpenApi
	}
	return json.Marshal(toSerialize)
}

type NullablePublishRequestSpec struct {
	value *PublishRequestSpec
	isSet bool
}

func (v NullablePublishRequestSpec) Get() *PublishRequestSpec {
	return v.value
}

func (v *NullablePublishRequestSpec) Set(val *PublishRequestSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishRequestSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishRequestSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishRequestSpec(val *PublishRequestSpec) *NullablePublishRequestSpec {
	return &NullablePublishRequestSpec{value: val, isSet: true}
}

func (v NullablePublishRequestSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishRequestSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
