/*
STACKIT API Management Service

STACKIT API Manager

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Spec struct for Spec
type Spec struct {
	OpenApi *SpecOpenApi `json:"openApi,omitempty"`
}

// NewSpec instantiates a new Spec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpec() *Spec {
	this := Spec{}
	return &this
}

// NewSpecWithDefaults instantiates a new Spec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecWithDefaults() *Spec {
	this := Spec{}
	return &this
}

// GetOpenApi returns the OpenApi field value if set, zero value otherwise.
func (o *Spec) GetOpenApi() SpecOpenApi {
	if o == nil || o.OpenApi == nil {
		var ret SpecOpenApi
		return ret
	}
	return *o.OpenApi
}

// GetOpenApiOk returns a tuple with the OpenApi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetOpenApiOk() (*SpecOpenApi, bool) {
	if o == nil || o.OpenApi == nil {
		return nil, false
	}
	return o.OpenApi, true
}

// HasOpenApi returns a boolean if a field has been set.
func (o *Spec) HasOpenApi() bool {
	if o != nil && o.OpenApi != nil {
		return true
	}

	return false
}

// SetOpenApi gets a reference to the given SpecOpenApi and assigns it to the OpenApi field.
func (o *Spec) SetOpenApi(v SpecOpenApi) {
	o.OpenApi = &v
}

func (o Spec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OpenApi != nil {
		toSerialize["openApi"] = o.OpenApi
	}
	return json.Marshal(toSerialize)
}

type NullableSpec struct {
	value *Spec
	isSet bool
}

func (v NullableSpec) Get() *Spec {
	return v.value
}

func (v *NullableSpec) Set(val *Spec) {
	v.value = val
	v.isSet = true
}

func (v NullableSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpec(val *Spec) *NullableSpec {
	return &NullableSpec{value: val, isSet: true}
}

func (v NullableSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
