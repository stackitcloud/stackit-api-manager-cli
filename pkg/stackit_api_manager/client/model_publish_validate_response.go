/*
STACKIT API Management Service

STACKIT API Manager

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PublishValidateResponse OpenAPI specification was validated successfully
type PublishValidateResponse struct {
	// List of specific warnings returned by the API specification linter
	LinterWarnings []string `json:"linterWarnings,omitempty"`
	// Number of warnings returned by the API specification linter
	LinterWarningsCount *string `json:"linterWarningsCount,omitempty"`
}

// NewPublishValidateResponse instantiates a new PublishValidateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishValidateResponse() *PublishValidateResponse {
	this := PublishValidateResponse{}
	return &this
}

// NewPublishValidateResponseWithDefaults instantiates a new PublishValidateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishValidateResponseWithDefaults() *PublishValidateResponse {
	this := PublishValidateResponse{}
	return &this
}

// GetLinterWarnings returns the LinterWarnings field value if set, zero value otherwise.
func (o *PublishValidateResponse) GetLinterWarnings() []string {
	if o == nil || o.LinterWarnings == nil {
		var ret []string
		return ret
	}
	return o.LinterWarnings
}

// GetLinterWarningsOk returns a tuple with the LinterWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishValidateResponse) GetLinterWarningsOk() ([]string, bool) {
	if o == nil || o.LinterWarnings == nil {
		return nil, false
	}
	return o.LinterWarnings, true
}

// HasLinterWarnings returns a boolean if a field has been set.
func (o *PublishValidateResponse) HasLinterWarnings() bool {
	if o != nil && o.LinterWarnings != nil {
		return true
	}

	return false
}

// SetLinterWarnings gets a reference to the given []string and assigns it to the LinterWarnings field.
func (o *PublishValidateResponse) SetLinterWarnings(v []string) {
	o.LinterWarnings = v
}

// GetLinterWarningsCount returns the LinterWarningsCount field value if set, zero value otherwise.
func (o *PublishValidateResponse) GetLinterWarningsCount() string {
	if o == nil || o.LinterWarningsCount == nil {
		var ret string
		return ret
	}
	return *o.LinterWarningsCount
}

// GetLinterWarningsCountOk returns a tuple with the LinterWarningsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishValidateResponse) GetLinterWarningsCountOk() (*string, bool) {
	if o == nil || o.LinterWarningsCount == nil {
		return nil, false
	}
	return o.LinterWarningsCount, true
}

// HasLinterWarningsCount returns a boolean if a field has been set.
func (o *PublishValidateResponse) HasLinterWarningsCount() bool {
	if o != nil && o.LinterWarningsCount != nil {
		return true
	}

	return false
}

// SetLinterWarningsCount gets a reference to the given string and assigns it to the LinterWarningsCount field.
func (o *PublishValidateResponse) SetLinterWarningsCount(v string) {
	o.LinterWarningsCount = &v
}

func (o PublishValidateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LinterWarnings != nil {
		toSerialize["linterWarnings"] = o.LinterWarnings
	}
	if o.LinterWarningsCount != nil {
		toSerialize["linterWarningsCount"] = o.LinterWarningsCount
	}
	return json.Marshal(toSerialize)
}

type NullablePublishValidateResponse struct {
	value *PublishValidateResponse
	isSet bool
}

func (v NullablePublishValidateResponse) Get() *PublishValidateResponse {
	return v.value
}

func (v *NullablePublishValidateResponse) Set(val *PublishValidateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishValidateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishValidateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishValidateResponse(val *PublishValidateResponse) *NullablePublishValidateResponse {
	return &NullablePublishValidateResponse{value: val, isSet: true}
}

func (v NullablePublishValidateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishValidateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
